{"version":3,"sources":["components/Person.js","components/PersonForm.js","components/FilterForm.js","services/persons.js","components/OpNote.js","App.js","index.js"],"names":["Person","content","clickHandler","name","number","onClick","PersonForm","formHandler","perChange","numChange","nameState","numState","onSubmit","value","onChange","type","FilterForm","str","handler","baseUrl","personService","getAll","axios","get","then","resp","data","create","newPerson","post","update","id","newPersonVersion","put","del","delete","OpNote","msg","className","App","useState","persons","setPersons","newName","setNewName","newNum","setNewNum","searchStr","setSearchStr","opText","setOpText","useEffect","initialPersons","peopleToShow","length","filter","person","toLowerCase","includes","event","target","forEach","console","log","buttonClicked","preventDefault","window","alert","personObject","some","confirm","find","returnedPerson","map","catch","error","setTimeout","concat","personToDelete","handleDeletion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfbb6bbf.chunk.js","sourcesContent":["const Person = ({content, clickHandler}) => {\r\n    return (\r\n      <li>\r\n        <p>{content.name} {content.number} <button onClick={clickHandler}>delete</button></p>\r\n      </li>\r\n    )\r\n  }\r\n\r\nexport default Person","const PersonForm = ({formHandler, perChange, numChange, nameState, numState}) => {\r\n    return (\r\n      <form onSubmit={formHandler}>\r\n          <div>\r\n            <ul>\r\n              <li>\r\n                name: <input\r\n                value={nameState}\r\n                onChange={perChange} //each time a char is added to textbox onChange is called\r\n                />\r\n              </li>\r\n              <li>\r\n                number: <input\r\n                  value={numState}\r\n                  onChange={numChange} //each time a char is added to textbox onChange is called\r\n                />\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n    )\r\n  }\r\n\r\nexport default PersonForm","const FilterForm = ({str, handler}) => {\r\n    return (<input \r\n      value={str}\r\n      onChange={handler}\r\n    />\r\n    )\r\n  }\r\nexport default FilterForm  ","/*\r\nThis file serves as an abstraction layer for communicating\r\nwith the backend server\r\n*/\r\n\r\nimport axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n/*\r\nThis function returns all of the people objects in the database\r\n*/\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl) //capture all the data\r\n    return request.then(resp => resp.data) //return just the data\r\n}\r\n/*\r\nThis function adds a new person object to the database\r\n*/\r\nconst create = (newPerson) => {\r\n    const request = axios.post(baseUrl, newPerson)\r\n    return request.then(resp => resp.data)\r\n}\r\n\r\n/*\r\nThis function updates a particular person object\r\nin the database\r\n*/\r\nconst update = (id, newPersonVersion) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newPersonVersion)\r\n    return request.then(resp => resp.data)\r\n}\r\n\r\n/*\r\nThis function deletes a person object\r\nout of the database\r\n*/\r\nconst del = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(resp => resp.data)\r\n}\r\n\r\nconst personService = {\r\n    getAll,\r\n    create,\r\n    update,\r\n    del\r\n}\r\n\r\nexport default personService","const OpNote = ({msg}) => {\r\n    if(msg === null){\r\n        return null\r\n    }\r\n    return (\r\n        <div className='notification'>\r\n            {msg}\r\n        </div>\r\n    )\r\n  }\r\n  \r\n  export default OpNote","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person.js'\nimport PersonForm from './components/PersonForm.js'\nimport FilterForm from './components/FilterForm.js'\nimport personService from \"./services/persons\"\nimport OpNote from './components/OpNote.js'\n\n/*\n* React Phonebook application. Uses state to add new people to phonebook\n* and search for people based on name\n*/\n\nconst App = () => {\n  /*\n  This piece of state contains the array of person objects\n  */\n  const [ persons, setPersons ] = useState([])\n\n  /*\n  This piece of state contains the current text in the name box\n  Default is no text\n   */ \n  const [ newName, setNewName ] = useState('')\n\n  /*\n  This piece of state contains the current text in the number box\n  Default is no text\n  */\n  const [newNum, setNewNum] = useState('')\n\n  /*\n  This piece of state contains the current text in the search box\n  Default is no text\n  */\n  const [searchStr, setSearchStr] = useState('')\n\n  /*\n  This piece of state contains the text currently displayed in the\n  operation notification component\n  */\n  const [opText, setOpText] = useState(null)\n\n  /*\n  This effect is run once, after the first render, because the second arg is an empty list\n  Its purpose is to fetch the initial state of the phonebook's data. This data is stored\n  in a db.json file locally. Using json-server to make the database server implementation\n  */\n  useEffect(() => {\n    personService\n    .getAll()\n    .then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  /*\n  This event handler is called when the button is clicked.\n  It adds a new person to the person state variable (list)\n  if their name is not already added, then resets the text\n  in the form. Also adds number\n  */\n  const addBoth = (buttonClicked) => {\n    buttonClicked.preventDefault() //prevent default form action\n    if(!newName.length || !newNum.length){\n      window.alert(\"Please don't enter an empty string\")\n    }\n    const personObject = { //create a new person object to add\n      name: newName,\n      number: newNum\n    }\n    if(persons.some(person => person.name === newName)){ //person already exists in server\n      if(window.confirm(`${newName} is already added to phonebook, would you like to replace their number?`)){\n        personService\n        .update(persons.find(person => person.name === newName).id, personObject) //get the id of the person object to be changed from the database\n        .then(returnedPerson => { //here we update our local frontend state\n          setPersons(persons.map(person => { \n            return person.name === newName ? returnedPerson : person //keep the old versions of people unless it's the one we just changed, so use the new version in local state\n          })) //note the return in the above line. fails to compile without it\n        })\n        .catch(error => { //handler for rare case that person is removed while attempting to update\n          setPersons(persons.filter(person => person.name !== newName)) //remove the local cached version of the person\n          setOpText(`Error: The person ${newName} has already been removed from the server, cannot change their number.`)\n          setTimeout(() => {\n            setOpText(null)\n          }, 5000)\n        })\n        //update the operation notification text for 5 sec for successful update number change\n        setOpText(`${newName}'s number is now set to ${newNum}`)\n        setTimeout(() => {\n          setOpText(null)\n        }, 5000)\n      }      \n    }\n    else{//send the new person object to the server\n      personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson)) //have to add the new person to our local state\n        setNewName('')\n        setNewNum('')\n      })\n      //update the operation notification text for 5 sec\n      setOpText(`${newName} added to the phonebook!`)\n      setTimeout(() => {\n        setOpText(null)\n      }, 5000)\n    }\n    setNewName('') //reset the text in the form box to blank\n    setNewNum('')\n  }\n\n  /*\n  This event handler is called each time a char is added in the name textbox.\n  It sets the state variable newName to whatever is currently in the\n  textbox.\n  */\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  /*\n  This event handler is called each time a char is added in the num textbox.\n  It sets the state variable newNum to whatever is currently in the\n  textbox.\n  */\n  const handleNumChange = (event) => {\n    setNewNum(event.target.value)\n  }\n\n  /*\n  This event handler is called each time a char is added in the search textbox.\n  It sets the state variable searchStr to whatever is currently in the \n  textbox.\n  */\n  const handleSearchChange = (event) => {\n    setSearchStr(event.target.value)\n    persons.forEach((person) => console.log(person))\n  }\n\n  /*\n  this var is updated each time theres a state change. It filters the people to show\n  if the searchStr is not empty\n  */\n  const peopleToShow = searchStr.length\n    ? persons.filter(person => person.name.toLowerCase().includes(searchStr.toLowerCase()))\n    : persons\n\n  /*\n  this function tells the backend to remove\n  a person object\n  */\n  const handleDeletion = (id) => {\n    const personToDelete = persons.find(person => person.id === id)\n    if(window.confirm(`Are you sure you want to remove ${personToDelete.name}?`)){\n      personService\n      .del(id).then(() => {\n        setPersons(persons.filter(person => person.id !== id))\n      })\n      .catch(error => {\n        alert(`the person '${personToDelete.name} was already removed from the server'`)\n        console.log(error)\n      })\n    }\n  }\n\n  return (\n    <div>\n      <OpNote msg={opText}/>\n      <h2>Phonebook</h2>\n      <form>\n        show names only containing: \n          <FilterForm str={searchStr} handler={handleSearchChange} /> {/*Form lets you input a string to filter people*/}\n      </form>\n      <h2>Add a new</h2>\n        <PersonForm formHandler={addBoth} perChange={handlePersonChange} \n          numChange={handleNumChange} nameState={newName} numState={newNum}/> {/*Form for adding a new person with their phone number*/} \n      <h2>Numbers</h2>\n      <ul>\n        {peopleToShow.map(person =>\n          <Person key={person.name} content={person} clickHandler={() => handleDeletion(person.id)}/>  //generate a specific handler for each button\n          )} {/* generate a list of people in the html of the page */}\n      </ul>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}